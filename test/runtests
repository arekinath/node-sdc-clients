#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright (c) 2016, Joyent, Inc.
#

#
# Run the node-sdc-clients tests in a running SDC.
#
# Run `./runtests -h` for usage info.
#

if [[ -n "$TRACE" ]]; then
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
set -o pipefail



#---- guard

if [[ ! -f "/lib/sdc/.sdc-test-no-production-data" ]]; then
    cat <<EOF
To run this test you must create the file:

    /lib/sdc/.sdc-test-no-production-data

after ensuring you have no production data on this SDC.
EOF
    exit 2
fi



#---- support stuff

function fatal
{
    echo "$0: fatal error: $*"
    exit 1
}

function errexit
{
    [[ $1 -ne 0 ]] || exit 0
    fatal "error exit status $1"
}

function usage
{
    echo "Usage:"
    echo "  ./runtests [OPTIONS...]     # from the GZ"
    echo ""
    echo "Options:"
    echo "  -h          Print this help and exit."
    echo "  -f FILTER   Filter pattern (substring match) for test files to run."
    echo "  -r REPOTER  The nodeunit reporter to use, default is 'tap'."
}



#---- mainline

trap 'errexit $?' EXIT

TOP=$(cd $(dirname $0)/../; pwd)
PATH=/usr/node/bin:$PATH

#TODO(RELENG-386): set test user: sdcclientstestuser ??
# Options.
opt_test_pattern=
opt_reporter=tap
while getopts "hf:r:" opt
do
    case "$opt" in
        h)
            usage
            exit 0
            ;;
        f)
            opt_test_pattern=$OPTARG
            ;;
        r)
            opt_reporter=$OPTARG
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done


# Gather DC setup info for the test files.
export AMON_IP=$(bash /lib/sdc/config.sh -json | json amon_admin_ips | cut -d, -f1)
export UFDS_IP=$(bash /lib/sdc/config.sh -json | json ufds_admin_ips | cut -d, -f1)
export CNAPI_IP=$(bash /lib/sdc/config.sh -json | json cnapi_admin_ips | cut -d, -f1)
export CA_IP=$(bash /lib/sdc/config.sh -json | json ca_admin_ips | cut -d, -f1)
export NAPI_IP=$(bash /lib/sdc/config.sh -json | json napi_admin_ips | cut -d, -f1)
export VMAPI_IP=$(bash /lib/sdc/config.sh -json | json vmapi_admin_ips | cut -d, -f1)
export UFDS_ADMIN_UUID=$(bash /lib/sdc/config.sh -json | json ufds_admin_uuid)
export DSAPI_URL=$(bash /lib/sdc/config.sh -json | json dsapi_url)
export PAPI_IP=$(bash /lib/sdc/config.sh -json | json papi_admin_ips | cut -d, -f1)
export CNS_IP=$(sdcadm insts cns -j | json 0.ip)

echo ""
echo "# Datacenter config:"
echo "#     AMON_IP is $AMON_IP"
echo "#     UFDS_IP is $UFDS_IP"
echo "#     CNAPI_IP is $CNAPI_IP"
echo "#     CA_IP is $CA_IP"
echo "#     NAPI_IP is $NAPI_IP"
echo "#     VMAPI_IP is $VMAPI_IP"
echo "#     DSAPI_URL is $DSAPI_URL"
echo "#     UFDS_ADMIN_UUID is $UFDS_ADMIN_UUID"
echo "#     PAPI_IP is $PAPI_IP"
echo "#     CNS_IP is $CNS_IP"


echo ""
cd $TOP
NODEUNIT=$TOP/node_modules/nodeunit/bin/nodeunit
test_files=$(ls -1 test/*.test.js)
test_files=$(echo "$test_files" | grep -v amon)   #XXX exclude for now
if [[ -n "$opt_test_pattern" ]]; then
    test_files=$(echo "$test_files" | grep "$opt_test_pattern" || true)
    echo "# Running filtered set of test files: $test_files"
fi
if [[ -n "$test_files" ]]; then
    $NODEUNIT --reporter=$opt_reporter $test_files
    # Note: Need https://github.com/caolan/nodeunit/pull/168 before we get
    # a non-zero exit status on any test failures.
fi
